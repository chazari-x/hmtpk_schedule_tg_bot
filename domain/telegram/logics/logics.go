package logics

import (
	"fmt"
	"github.com/chazari-x/hmtpk_schedule/config"
	"github.com/chazari-x/hmtpk_schedule/schedule"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"strings"
)

type Logic struct {
	cfg      *config.Telegram
	schedule *schedule.Schedule
}

func NewLogic(cfg *config.Telegram, schedule *schedule.Schedule) *Logic {
	return &Logic{cfg, schedule}
}

const (
	Support     = "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
	GotoSupport = "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
	SupportText = `–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ç–æ–≤–∞ –≤–∞–º –ø–æ–º–æ—á—å. –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ: <a href="%s">–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞</a>.

–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.

–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,
–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤`

	GroupScheduleIcoOne = "üë©‚Äçüéì"
	GroupScheduleIcoTwo = "üë®‚Äçüéì"
	GroupSchedule       = GroupScheduleIcoOne + " –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã " + GroupScheduleIcoTwo
	GroupScheduleText   = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã."

	TeacherScheduleIcoOne = "üë©‚Äçüè´"
	TeacherScheduleIcoTwo = "üë®‚Äçüè´"
	TeacherSchedule       = TeacherScheduleIcoOne + " –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è " + TeacherScheduleIcoTwo
	TeacherScheduleText   = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."

	GotoHome = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
	HomeText = `–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!

–≠—Ç–æ—Ç –±–æ—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏–µ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–∞–∏–ª—É—á—à–∏–π –æ–ø—ã—Ç.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞–º –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É!

–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,
–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ :3`
)

func (l *Logic) GetMessage(message *tgbotapi.Message) (tgbotapi.MessageConfig, error) {
	var msg tgbotapi.MessageConfig
	switch message.Text {
	case GotoHome:
		msg = tgbotapi.NewMessage(message.Chat.ID, HomeText)
	case GroupSchedule:
		msg = tgbotapi.NewMessage(message.Chat.ID, GroupScheduleText)
	case TeacherSchedule:
		msg = tgbotapi.NewMessage(message.Chat.ID, TeacherScheduleText)
	case Support:
		msg = tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf(SupportText, l.cfg.Support.Href))
	default:
		switch {
		case strings.Contains(message.Text, GroupScheduleIcoOne) && strings.Contains(message.Text, GroupScheduleIcoTwo):
			msg = tgbotapi.NewMessage(message.Chat.ID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É "+message.Text)
		case strings.Contains(message.Text, TeacherScheduleIcoOne) && strings.Contains(message.Text, TeacherScheduleIcoTwo):
			msg = tgbotapi.NewMessage(message.Chat.ID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è "+message.Text)
		default:
			msg = tgbotapi.NewMessage(message.Chat.ID, HomeText)
		}
	}

	msg.ReplyMarkup = l.getButtons(message.Text)
	msg.ParseMode = "html"

	return msg, nil
}

func (l *Logic) getButtons(list string) tgbotapi.ReplyKeyboardMarkup {
	var replyMarkup tgbotapi.ReplyKeyboardMarkup
	switch list {
	case GroupSchedule:
		var keyboard [][]tgbotapi.KeyboardButton
		keyboard = append(keyboard, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(GotoHome)))

		for _, group := range l.schedule.GetGroups() {
			group = fmt.Sprintf("%s %s %s", GroupScheduleIcoOne, group, GroupScheduleIcoTwo)
			keyboard = append(keyboard, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(group)))
		}

		replyMarkup = tgbotapi.NewReplyKeyboard(keyboard...)
	case TeacherSchedule:
		var keyboard [][]tgbotapi.KeyboardButton
		keyboard = append(keyboard, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(GotoHome)))

		for _, teacher := range l.schedule.GetTeachers() {
			teacher = fmt.Sprintf("%s %s %s", TeacherScheduleIcoOne, teacher, TeacherScheduleIcoTwo)
			keyboard = append(keyboard, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(teacher)))
		}

		replyMarkup = tgbotapi.NewReplyKeyboard(keyboard...)
	default:
		replyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton(GroupSchedule),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton(TeacherSchedule),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton(Support),
			),
		)
	}

	replyMarkup.OneTimeKeyboard = true // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	replyMarkup.ResizeKeyboard = true

	return replyMarkup
}
